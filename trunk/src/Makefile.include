build_sources = $(FILES) $(GENERATED_FILES)
build_sources_embed = $(build_sources:%='$(srcdir)/%')

comma__=,
build_resx_list = $(foreach res, $(RESOURCES), $(if $(filter %.resx, $(firstword $(subst $(comma__), ,$(res)))),$(res),))
build_others_list = $(foreach res, $(RESOURCES), $(if $(filter %.resx, $(firstword $(subst $(comma__), ,$(res)))), ,$(res)))
build_xamlg_list = $(filter %.xaml.g.cs, $(FILES))

build_resx_files = $(foreach res, $(build_resx_list), $(firstword $(subst $(comma__), ,$(res))))
build_resx_resources = $(build_resx_files:.resx=.resources)
build_resx_resources_hack = $(subst .resx,.resources, $(build_resx_list))
build_resx_resources_embed = $(build_resx_resources_hack:%='-resource:%')

build_others_files = $(foreach res, $(build_others_list), $(firstword $(subst $(comma__), ,$(res))))
build_others_resources = $(build_others_files)
build_others_resources_embed = $(build_others_list:%='-resource:$(srcdir)/%')

build_resources = $(build_resx_resources) $(build_others_resources)
build_resources_embed = $(build_resx_resources_embed) $(build_others_resources_embed)

build_references_ref = $(foreach ref, $(REFERENCES), $(if $(filter -pkg:%, $(ref)), $(ref), $(if $(filter -r:%, $(ref)), $(ref), -r:$(ref))))
build_references_ref += $(foreach ref, $(DLL_REFERENCES), -r:$(ref))
build_references_ref += $(foreach ref, $(PROJECT_REFERENCES), -r:$(ref))

EXTRA_DIST += $(build_sources) $(build_resx_files) $(build_others_files) $(ASSEMBLY_WRAPPER_IN) $(EXTRAS) $(DATA_FILES)
CLEANFILES = $(ASSEMBLY) $(ASSEMBLY).mdb $(BINARIES) $(build_resx_resources)
DISTCLEANFILES = $(GENERATED_FILES) $(pc_files) $(BUILD_DIR)/*

pkglib_SCRIPTS = $(ASSEMBLY)
bin_SCRIPTS = $(BINARIES)

programfilesdir = @prefix@/lib/@PACKAGE@
programfiles_DATA = $(PROGRAMFILES)
linuxpkgconfigdir = @prefix@/lib/pkgconfig
linuxpkgconfig_DATA = $(LINUX_PKGCONFIG)


# macros

# $(call emit-deploy-target,deploy-variable-name)
define emit-deploy-target
$($1): $($1_SOURCE)
	mkdir -p $$(dir $($1))
	cp '$$<' '$$@'
endef

# $(call emit-deploy-wrapper,wrapper-variable-name,wrapper-sourcefile,x)
# assumes that for a wrapper foo.pc its source template is foo.pc.in
# if $3 is non-empty then wrapper is marked exec
define emit-deploy-wrapper
$($1): $2 $(top_srcdir)/config.make
	mkdir -p $$(dir $($1))
	cp '$$<' '$$@'
	test -z '$3' || chmod +x '$$@'

$2: $2.in $(top_srcdir)/config.make
	sed -e "s,@prefix@,$(prefix)," -e "s,@PACKAGE@,$(PACKAGE)," < $2.in > $2
endef